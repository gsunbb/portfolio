<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ïö∞Î¶¨Î∞ò Í∞êÏ†ï Ï≤¥ÌÅ¨Ïù∏ ÏãúÏä§ÌÖú V3.5</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.4.0/css/all.min.css">
    <style>
        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        .emotion-card {
            transition: all 0.3s ease;
            transform: scale(1);
            position: relative;
            overflow: hidden;
        }
        .emotion-card:hover {
            transform: scale(1.02);
            box-shadow: 0 12px 35px rgba(0,0,0,0.15);
        }
        .emotion-card:active {
            transform: scale(0.98);
        }
        .tab-active {
            background: rgba(255,255,255,0.2);
            border-bottom: 3px solid #fff;
        }
        .chart-container {
            height: 400px;
        }
        .quantity-control {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
            border-top: 1px solid rgba(255,255,255,0.2);
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 8px 12px;
            opacity: 0;
            transform: translateY(100%);
            transition: all 0.3s ease;
        }
        .emotion-card:hover .quantity-control {
            opacity: 1;
            transform: translateY(0);
        }
        .quantity-btn {
            width: 28px;
            height: 28px;
            border-radius: 50%;
            border: 1px solid rgba(255,255,255,0.3);
            background: rgba(255,255,255,0.2);
            color: white;
            font-size: 14px;
            font-weight: bold;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
            backdrop-filter: blur(5px);
        }
        .quantity-btn:hover {
            background: rgba(255,255,255,0.3);
            transform: scale(1.1);
        }
        .quantity-btn:active {
            transform: scale(0.9);
        }
        .quantity-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        .quantity-btn:disabled:hover {
            background: rgba(255,255,255,0.2);
            transform: scale(1);
        }
        .quantity-display {
            color: white;
            font-weight: bold;
            font-size: 14px;
            min-width: 40px;
            text-align: center;
            text-shadow: 0 1px 2px rgba(0,0,0,0.3);
        }
        .emotion-main {
            padding: 24px 16px 48px 16px;
            cursor: pointer;
            height: 100%;
            min-height: 140px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }
        .emotion-emoji {
            font-size: 3rem;
            margin-bottom: 8px;
        }
        .emotion-name {
            font-size: 1.125rem;
            font-weight: bold;
            margin-bottom: 4px;
        }
        .emotion-count {
            font-size: 0.875rem;
            opacity: 0.8;
        }
        .mobile-controls {
            display: none;
            margin-top: 12px;
            padding: 12px;
            background: rgba(0,0,0,0.1);
            border-radius: 12px;
            backdrop-filter: blur(10px);
        }
        @media (max-width: 768px) {
            .quantity-control {
                position: static;
                opacity: 1;
                transform: translateY(0);
                background: rgba(0,0,0,0.15);
                border-top: none;
                border-radius: 0 0 12px 12px;
            }
            .emotion-card:hover .quantity-control {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
</head>
<body class="gradient-bg min-h-screen">
    <div class="container mx-auto px-4 py-6">
        <!-- Ìó§Îçî -->
        <div class="text-center mb-8">
            <h1 class="text-4xl font-bold text-white mb-2">Ïö∞Î¶¨Î∞ò Í∞êÏ†ï Ï≤¥ÌÅ¨Ïù∏</h1>
            <p class="text-white opacity-80 text-lg" id="currentDate"></p>
        </div>

        <!-- ÌÉ≠ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò -->
        <div class="flex justify-center mb-6">
            <div class="bg-white bg-opacity-20 rounded-lg p-1 flex">
                <button onclick="showTab('checkin')" id="tab-checkin" class="tab-active px-6 py-2 rounded-lg text-white font-medium transition-all">Ï≤¥ÌÅ¨Ïù∏</button>
                <button onclick="showTab('today-stats')" id="tab-today-stats" class="px-6 py-2 rounded-lg text-white font-medium transition-all">Ïò§Îäò ÌÜµÍ≥Ñ</button>
                <button onclick="showTab('weekly-stats')" id="tab-weekly-stats" class="px-6 py-2 rounded-lg text-white font-medium transition-all">Ï£ºÍ∞Ñ ÌÜµÍ≥Ñ</button>
                <button onclick="showTab('admin')" id="tab-admin" class="px-6 py-2 rounded-lg text-white font-medium transition-all">Í¥ÄÎ¶¨Ïûê</button>
            </div>
        </div>

        <!-- Ï≤¥ÌÅ¨Ïù∏ ÌéòÏù¥ÏßÄ -->
        <div id="checkin-page" class="tab-content">
            <div class="text-center mb-6">
                <h2 class="text-2xl font-bold text-white mb-4">Ïò§Îäò Í∏∞Î∂ÑÏùÄ Ïñ¥Îñ†ÏÑ∏Ïöî?</h2>
            </div>
            
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 max-w-4xl mx-auto">
                <div class="emotion-card bg-yellow-400 hover:bg-yellow-300 text-white rounded-xl shadow-lg relative">
                    <div class="emotion-main" onclick="addEmotion('Í∏∞ÏÅ®')">
                        <div class="emotion-emoji">üòä</div>
                        <div class="emotion-name">Í∏∞ÏÅ®/Ï¶êÍ±∞ÏõÄ</div>
                        <div class="emotion-count" id="count-Í∏∞ÏÅ®">0Î™Ö</div>
                    </div>
                    <div class="quantity-control">
                        <button class="quantity-btn" onclick="decreaseEmotion('Í∏∞ÏÅ®')" id="decrease-Í∏∞ÏÅ®">
                            <i class="fas fa-minus"></i>
                        </button>
                        <div class="quantity-display" id="quantity-Í∏∞ÏÅ®">0</div>
                        <button class="quantity-btn" onclick="increaseEmotion('Í∏∞ÏÅ®')">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                </div>
                
                <div class="emotion-card bg-gray-400 hover:bg-gray-300 text-white rounded-xl shadow-lg relative">
                    <div class="emotion-main" onclick="addEmotion('Î≥¥ÌÜµ')">
                        <div class="emotion-emoji">üòê</div>
                        <div class="emotion-name">Î≥¥ÌÜµ/ÌèâÏò®</div>
                        <div class="emotion-count" id="count-Î≥¥ÌÜµ">0Î™Ö</div>
                    </div>
                    <div class="quantity-control">
                        <button class="quantity-btn" onclick="decreaseEmotion('Î≥¥ÌÜµ')" id="decrease-Î≥¥ÌÜµ">
                            <i class="fas fa-minus"></i>
                        </button>
                        <div class="quantity-display" id="quantity-Î≥¥ÌÜµ">0</div>
                        <button class="quantity-btn" onclick="increaseEmotion('Î≥¥ÌÜµ')">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                </div>
                
                <div class="emotion-card bg-blue-500 hover:bg-blue-400 text-white rounded-xl shadow-lg relative">
                    <div class="emotion-main" onclick="addEmotion('Ïä¨Ìîî')">
                        <div class="emotion-emoji">üò¢</div>
                        <div class="emotion-name">Ïä¨Ìîî/Ïö∞Ïö∏</div>
                        <div class="emotion-count" id="count-Ïä¨Ìîî">0Î™Ö</div>
                    </div>
                    <div class="quantity-control">
                        <button class="quantity-btn" onclick="decreaseEmotion('Ïä¨Ìîî')" id="decrease-Ïä¨Ìîî">
                            <i class="fas fa-minus"></i>
                        </button>
                        <div class="quantity-display" id="quantity-Ïä¨Ìîî">0</div>
                        <button class="quantity-btn" onclick="increaseEmotion('Ïä¨Ìîî')">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                </div>
                
                <div class="emotion-card bg-red-500 hover:bg-red-400 text-white rounded-xl shadow-lg relative">
                    <div class="emotion-main" onclick="addEmotion('ÌôîÎÇ®')">
                        <div class="emotion-emoji">üò†</div>
                        <div class="emotion-name">ÌôîÎÇ®/ÏßúÏ¶ù</div>
                        <div class="emotion-count" id="count-ÌôîÎÇ®">0Î™Ö</div>
                    </div>
                    <div class="quantity-control">
                        <button class="quantity-btn" onclick="decreaseEmotion('ÌôîÎÇ®')" id="decrease-ÌôîÎÇ®">
                            <i class="fas fa-minus"></i>
                        </button>
                        <div class="quantity-display" id="quantity-ÌôîÎÇ®">0</div>
                        <button class="quantity-btn" onclick="increaseEmotion('ÌôîÎÇ®')">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                </div>
                
                <div class="emotion-card bg-orange-500 hover:bg-orange-400 text-white rounded-xl shadow-lg relative">
                    <div class="emotion-main" onclick="addEmotion('Î∂àÏïà')">
                        <div class="emotion-emoji">üò∞</div>
                        <div class="emotion-name">Î∂àÏïà/Í±±Ï†ï</div>
                        <div class="emotion-count" id="count-Î∂àÏïà">0Î™Ö</div>
                    </div>
                    <div class="quantity-control">
                        <button class="quantity-btn" onclick="decreaseEmotion('Î∂àÏïà')" id="decrease-Î∂àÏïà">
                            <i class="fas fa-minus"></i>
                        </button>
                        <div class="quantity-display" id="quantity-Î∂àÏïà">0</div>
                        <button class="quantity-btn" onclick="increaseEmotion('Î∂àÏïà')">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                </div>
                
                <div class="emotion-card bg-purple-600 hover:bg-purple-500 text-white rounded-xl shadow-lg relative">
                    <div class="emotion-main" onclick="addEmotion('ÌîºÍ≥§')">
                        <div class="emotion-emoji">üò¥</div>
                        <div class="emotion-name">ÌîºÍ≥§/Î¨¥Í∏∞Î†•</div>
                        <div class="emotion-count" id="count-ÌîºÍ≥§">0Î™Ö</div>
                    </div>
                    <div class="quantity-control">
                        <button class="quantity-btn" onclick="decreaseEmotion('ÌîºÍ≥§')" id="decrease-ÌîºÍ≥§">
                            <i class="fas fa-minus"></i>
                        </button>
                        <div class="quantity-display" id="quantity-ÌîºÍ≥§">0</div>
                        <button class="quantity-btn" onclick="increaseEmotion('ÌîºÍ≥§')">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                </div>
                
                <div class="emotion-card bg-pink-500 hover:bg-pink-400 text-white rounded-xl shadow-lg relative">
                    <div class="emotion-main" onclick="addEmotion('ÏÑ§Î†ò')">
                        <div class="emotion-emoji">ü§ó</div>
                        <div class="emotion-name">ÏÑ§Î†ò/Í∏∞ÎåÄ</div>
                        <div class="emotion-count" id="count-ÏÑ§Î†ò">0Î™Ö</div>
                    </div>
                    <div class="quantity-control">
                        <button class="quantity-btn" onclick="decreaseEmotion('ÏÑ§Î†ò')" id="decrease-ÏÑ§Î†ò">
                            <i class="fas fa-minus"></i>
                        </button>
                        <div class="quantity-display" id="quantity-ÏÑ§Î†ò">0</div>
                        <button class="quantity-btn" onclick="increaseEmotion('ÏÑ§Î†ò')">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                </div>
                
                <div class="emotion-card bg-red-700 hover:bg-red-600 text-white rounded-xl shadow-lg relative">
                    <div class="emotion-main" onclick="addEmotion('Ïä§Ìä∏Î†àÏä§')">
                        <div class="emotion-emoji">üò§</div>
                        <div class="emotion-name">Ïä§Ìä∏Î†àÏä§</div>
                        <div class="emotion-count" id="count-Ïä§Ìä∏Î†àÏä§">0Î™Ö</div>
                    </div>
                    <div class="quantity-control">
                        <button class="quantity-btn" onclick="decreaseEmotion('Ïä§Ìä∏Î†àÏä§')" id="decrease-Ïä§Ìä∏Î†àÏä§">
                            <i class="fas fa-minus"></i>
                        </button>
                        <div class="quantity-display" id="quantity-Ïä§Ìä∏Î†àÏä§">0</div>
                        <button class="quantity-btn" onclick="increaseEmotion('Ïä§Ìä∏Î†àÏä§')">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Ïò§Îäò ÌÜµÍ≥Ñ ÌéòÏù¥ÏßÄ -->
        <div id="today-stats-page" class="tab-content hidden">
            <div class="bg-white bg-opacity-10 rounded-xl p-6">
                <h2 class="text-2xl font-bold text-white mb-6 text-center">Ïò§ÎäòÏùò Í∞êÏ†ï ÌÜµÍ≥Ñ</h2>
                
                <div class="grid md:grid-cols-2 gap-6">
                    <div class="chart-container">
                        <canvas id="todayChart"></canvas>
                    </div>
                    
                    <div class="text-white">
                        <div class="bg-white bg-opacity-20 rounded-lg p-4 mb-4">
                            <h3 class="text-lg font-bold mb-2">üìä ÏöîÏïΩ</h3>
                            <p>Ï¥ù Ï∞∏Ïó¨ Ïù∏Ïõê: <span id="total-participants" class="font-bold">0Î™Ö</span></p>
                            <p>Í∞ÄÏû• ÎßéÏùÄ Í∞êÏ†ï: <span id="top-emotion" class="font-bold">-</span></p>
                        </div>
                        
                        <div class="bg-white bg-opacity-20 rounded-lg p-4">
                            <h3 class="text-lg font-bold mb-2">üí° Ïò§ÎäòÏùò Ï°∞Ïñ∏</h3>
                            <p id="advice-message" class="text-sm leading-relaxed">ÏïÑÏßÅ Ï≤¥ÌÅ¨Ïù∏Ïù¥ ÏóÜÏäµÎãàÎã§.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Ï£ºÍ∞Ñ ÌÜµÍ≥Ñ ÌéòÏù¥ÏßÄ -->
        <div id="weekly-stats-page" class="tab-content hidden">
            <div class="bg-white bg-opacity-10 rounded-xl p-6">
                <h2 class="text-2xl font-bold text-white mb-6 text-center">Ï£ºÍ∞Ñ Í∞êÏ†ï Ìä∏Î†åÎìú</h2>
                
                <div class="chart-container">
                    <canvas id="weeklyChart"></canvas>
                </div>
                
                <div class="mt-6 bg-white bg-opacity-20 rounded-lg p-4">
                    <h3 class="text-lg font-bold text-white mb-2">üìà Ï£ºÍ∞Ñ Ïù∏ÏÇ¨Ïù¥Ìä∏</h3>
                    <p id="weekly-insight" class="text-white text-sm">Ï£ºÍ∞Ñ Îç∞Ïù¥ÌÑ∞Î•º Î∂ÑÏÑù Ï§ëÏûÖÎãàÎã§...</p>
                </div>
            </div>
        </div>

        <!-- Í¥ÄÎ¶¨Ïûê ÌéòÏù¥ÏßÄ -->
        <div id="admin-page" class="tab-content hidden">
            <div class="bg-white bg-opacity-10 rounded-xl p-6">
                <h2 class="text-2xl font-bold text-white mb-6 text-center">Í¥ÄÎ¶¨Ïûê ÌéòÏù¥ÏßÄ</h2>
                
                <div class="grid md:grid-cols-2 gap-6">
                    <!-- Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨ -->
                    <div class="bg-white bg-opacity-20 rounded-lg p-4">
                        <h3 class="text-lg font-bold text-white mb-4">üìä Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨</h3>
                        
                        <button onclick="exportData()" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-2 transition-all">
                            <i class="fas fa-download mr-2"></i>Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ (CSV)
                        </button>
                        
                        <button onclick="clearTodayData()" class="w-full bg-yellow-600 hover:bg-yellow-700 text-white font-bold py-2 px-4 rounded mb-2 transition-all">
                            <i class="fas fa-refresh mr-2"></i>Ïò§Îäò Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
                        </button>
                        
                        <button onclick="showAllData()" class="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded mb-2 transition-all">
                            <i class="fas fa-eye mr-2"></i>Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Î≥¥Í∏∞
                        </button>
                    </div>
                    
                    <!-- Îç∞Ïù¥ÌÑ∞ Î≥µÏõê -->
                    <div class="bg-white bg-opacity-20 rounded-lg p-4">
                        <h3 class="text-lg font-bold text-white mb-4">üì• Îç∞Ïù¥ÌÑ∞ Î≥µÏõê</h3>
                        
                        <input type="file" id="restore-file" accept=".json,.csv" class="w-full bg-white bg-opacity-20 text-white rounded py-2 px-3 mb-2">
                        
                        <button onclick="restoreData()" class="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded mb-2 transition-all">
                            <i class="fas fa-upload mr-2"></i>Îç∞Ïù¥ÌÑ∞ Î≥µÏõêÌïòÍ∏∞
                        </button>
                        
                        <div id="restore-log" class="text-xs text-white opacity-80 mt-2 max-h-32 overflow-y-auto"></div>
                    </div>
                </div>
                
                <!-- Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Î≥¥Í∏∞ -->
                <div id="all-data-section" class="mt-6 bg-white bg-opacity-20 rounded-lg p-4 hidden">
                    <h3 class="text-lg font-bold text-white mb-4">üìã Ï†ÄÏû•Îêú Î™®Îì† Îç∞Ïù¥ÌÑ∞</h3>
                    <div id="all-data-content" class="text-white text-sm max-h-64 overflow-y-auto"></div>
                </div>
                
                <!-- ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥ -->
                <div class="mt-6 bg-white bg-opacity-20 rounded-lg p-4">
                    <h3 class="text-lg font-bold text-white mb-4">üîç ÏãúÏä§ÌÖú Ï†ïÎ≥¥</h3>
                    <div id="debug-info" class="text-white text-xs"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Ï†ÑÏó≠ Î≥ÄÏàò
        let todayData = {};
        let historyData = {};
        let todayChart = null;
        let weeklyChart = null;
        
        const emotions = ['Í∏∞ÏÅ®', 'Î≥¥ÌÜµ', 'Ïä¨Ìîî', 'ÌôîÎÇ®', 'Î∂àÏïà', 'ÌîºÍ≥§', 'ÏÑ§Î†ò', 'Ïä§Ìä∏Î†àÏä§'];
        const emotionColors = {
            'Í∏∞ÏÅ®': '#FCD34D',
            'Î≥¥ÌÜµ': '#9CA3AF', 
            'Ïä¨Ìîî': '#3B82F6',
            'ÌôîÎÇ®': '#EF4444',
            'Î∂àÏïà': '#F97316',
            'ÌîºÍ≥§': '#7C3AED',
            'ÏÑ§Î†ò': '#EC4899',
            'Ïä§Ìä∏Î†àÏä§': '#B91C1C'
        };

        // ÌòÑÏû¨ ÎÇ†Ïßú Í∞ÄÏ†∏Ïò§Í∏∞ (Ìï≠ÏÉÅ Ïã§Ï†ú Ïò§Îäò ÎÇ†Ïßú)
        function getTodayString() {
            const today = new Date();
            return today.getFullYear() + '-' + 
                   String(today.getMonth() + 1).padStart(2, '0') + '-' + 
                   String(today.getDate()).padStart(2, '0');
        }

        // ÎÇ†Ïßú ÌëúÏãú Ìè¨Îß∑
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.getFullYear() + 'ÎÖÑ ' + 
                   (date.getMonth() + 1) + 'Ïõî ' + 
                   date.getDate() + 'Ïùº';
        }

        // Ï¥àÍ∏∞Ìôî
        function init() {
            const todayString = getTodayString();
            document.getElementById('currentDate').textContent = formatDate(todayString);
            
            // Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
            loadData();
            
            // ÎÇ†ÏßúÍ∞Ä Î∞îÎÄåÏóàÎäîÏßÄ ÌôïÏù∏
            checkDateChange();
            
            updateDisplay();
            updateDebugInfo();
        }

        // Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        function loadData() {
            const savedData = localStorage.getItem('emotionData');
            const savedHistory = localStorage.getItem('emotionHistory');
            
            if (savedData) {
                try {
                    const data = JSON.parse(savedData);
                    todayData = data.todayData || {};
                    historyData = data.historyData || {};
                } catch (e) {
                    console.error('Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïò§Î•ò:', e);
                    todayData = {};
                    historyData = {};
                }
            }
            
            if (savedHistory) {
                try {
                    const history = JSON.parse(savedHistory);
                    Object.assign(historyData, history);
                } catch (e) {
                    console.error('ÌûàÏä§ÌÜ†Î¶¨ Î°úÎìú Ïò§Î•ò:', e);
                }
            }

            // Ïò§Îäò Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî (Ïã§Ï†ú Ïò§Îäò ÎÇ†Ïßú Í∏∞Ï§Ä)
            const todayString = getTodayString();
            if (!todayData[todayString]) {
                todayData[todayString] = {};
                emotions.forEach(emotion => {
                    todayData[todayString][emotion] = 0;
                });
            }
        }

        // ÎÇ†Ïßú Î≥ÄÍ≤Ω ÌôïÏù∏ Î∞è Ï≤òÎ¶¨
        function checkDateChange() {
            const todayString = getTodayString();
            const lastSavedDate = localStorage.getItem('lastSavedDate');
            
            if (lastSavedDate && lastSavedDate !== todayString) {
                // ÎÇ†ÏßúÍ∞Ä Î∞îÎÄú - Ïñ¥Ï†ú Îç∞Ïù¥ÌÑ∞Î•º ÌûàÏä§ÌÜ†Î¶¨Î°ú Ïù¥Îèô
                if (todayData[lastSavedDate]) {
                    historyData[lastSavedDate] = { ...todayData[lastSavedDate] };
                    delete todayData[lastSavedDate];
                }
                
                // Ïò§Îäò Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
                todayData[todayString] = {};
                emotions.forEach(emotion => {
                    todayData[todayString][emotion] = 0;
                });
                
                saveData();
            }
            
            localStorage.setItem('lastSavedDate', todayString);
        }

        // Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
        function saveData() {
            const dataToSave = {
                todayData: todayData,
                historyData: historyData,
                lastSaved: new Date().toISOString(),
                version: '3.5'
            };
            
            localStorage.setItem('emotionData', JSON.stringify(dataToSave));
            localStorage.setItem('emotionHistory', JSON.stringify(historyData));
            localStorage.setItem('lastSavedDate', getTodayString());
        }

        // Í∞êÏ†ï Ï∂îÍ∞Ä
        function addEmotion(emotion) {
            const todayString = getTodayString();
            
            if (!todayData[todayString]) {
                todayData[todayString] = {};
                emotions.forEach(e => {
                    todayData[todayString][e] = 0;
                });
            }
            
            todayData[todayString][emotion]++;
            updateDisplay();
            saveData();
        }

        // Í∞êÏ†ï Ï¶ùÍ∞Ä
        function increaseEmotion(emotion) {
            const todayString = getTodayString();
            
            if (!todayData[todayString]) {
                todayData[todayString] = {};
                emotions.forEach(e => {
                    todayData[todayString][e] = 0;
                });
            }
            
            todayData[todayString][emotion]++;
            updateDisplay();
            saveData();
        }

        // Í∞êÏ†ï Í∞êÏÜå
        function decreaseEmotion(emotion) {
            const todayString = getTodayString();
            
            if (!todayData[todayString]) {
                todayData[todayString] = {};
                emotions.forEach(e => {
                    todayData[todayString][e] = 0;
                });
            }
            
            if (todayData[todayString][emotion] > 0) {
                todayData[todayString][emotion]--;
                updateDisplay();
                saveData();
            }
        }

        // ÌôîÎ©¥ ÏóÖÎç∞Ïù¥Ìä∏
        function updateDisplay() {
            const todayString = getTodayString();
            const today = todayData[todayString] || {};
            
            // Î≤ÑÌäº Ïπ¥Ïö¥Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
            emotions.forEach(emotion => {
                const count = today[emotion] || 0;
                const element = document.getElementById(`count-${emotion}`);
                const quantityElement = document.getElementById(`quantity-${emotion}`);
                const decreaseBtn = document.getElementById(`decrease-${emotion}`);
                
                if (element) {
                    element.textContent = count + 'Î™Ö';
                }
                if (quantityElement) {
                    quantityElement.textContent = count;
                }
                if (decreaseBtn) {
                    decreaseBtn.disabled = count === 0;
                }
            });
            
            updateTodayStats();
            updateWeeklyStats();
        }

        // Ïò§Îäò ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
        function updateTodayStats() {
            const todayString = getTodayString();
            const today = todayData[todayString] || {};
            
            const total = Object.values(today).reduce((sum, count) => sum + count, 0);
            document.getElementById('total-participants').textContent = total + 'Î™Ö';
            
            if (total === 0) {
                document.getElementById('top-emotion').textContent = '-';
                document.getElementById('advice-message').textContent = 'ÏïÑÏßÅ Ï≤¥ÌÅ¨Ïù∏Ïù¥ ÏóÜÏäµÎãàÎã§.';
                return;
            }
            
            // Í∞ÄÏû• ÎßéÏùÄ Í∞êÏ†ï Ï∞æÍ∏∞
            let topEmotion = '';
            let maxCount = 0;
            let topPercentage = 0;
            
            emotions.forEach(emotion => {
                const count = today[emotion] || 0;
                if (count > maxCount) {
                    maxCount = count;
                    topEmotion = emotion;
                    topPercentage = Math.round((count / total) * 100);
                }
            });
            
            document.getElementById('top-emotion').textContent = `${topEmotion} (${topPercentage}%)`;
            
            // Ï°∞Ïñ∏ Î©îÏãúÏßÄ ÏÑ§Ï†ï
            setAdviceMessage(topEmotion, topPercentage);
            
            // Ï∞®Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
            updateTodayChart(today, total);
        }

        // Ï°∞Ïñ∏ Î©îÏãúÏßÄ ÏÑ§Ï†ï
        function setAdviceMessage(emotion, percentage) {
            const messages = {
                'Í∏∞ÏÅ®': {
                    high: "Ïö∞ÏôÄ! Ïò§Îäò Ïö∞Î¶¨Î∞ò ÏóêÎÑàÏßÄÍ∞Ä Ï†ïÎßê Ï¢ãÎÑ§Ïöî! Ïù¥Îü∞ Ï¢ãÏùÄ Î∂ÑÏúÑÍ∏∞Î•º ÏπúÍµ¨Îì§Í≥º Ìï®Íªò ÎÇòÎàÑÏñ¥Î≥¥Îäî Í±¥ Ïñ¥Îñ®ÍπåÏöî?",
                    medium: "Í∏∞ÏÅú ÎßàÏùåÏù¥ Í∞ÄÎìùÌïú ÌïòÎ£®ÎÑ§Ïöî! Í∏çÏ†ïÏ†ÅÏù∏ ÏóêÎÑàÏßÄÎ•º Í≥ÑÏÜç Ïú†ÏßÄÌï¥Î≥¥ÏïÑÏöî.",
                    low: "Ï¢ãÏùÄ ÏùºÏù¥ ÏûàÏóàÎÇò Î¥êÏöî! ÏûëÏùÄ Í∏∞ÏÅ®ÎèÑ ÏÜåÏ§ëÌûà Í∞ÑÏßÅÌï¥Î≥¥ÏÑ∏Ïöî."
                },
                'ÌîºÍ≥§': {
                    high: "Ïò§Îäò ÌîºÍ≥§Ìïú ÏπúÍµ¨Îì§Ïù¥ ÎßéÎÑ§Ïöî. Ïû†Íπê Ïä§Ìä∏Î†àÏπ≠ÌïòÍ±∞ÎÇò ÍπäÍ≤å Ïà®Ïâ¨Í∏∞Î•º Ìï¥Î≥¥Îäî Í±¥ Ïñ¥Îñ®ÍπåÏöî? Ï∂©Î∂ÑÌïú Ìú¥ÏãùÎèÑ Ï§ëÏöîÌï¥Ïöî!",
                    medium: "Ï°∞Í∏à ÌîºÍ≥§Ìïú ÌïòÎ£®Ïù∏ Í≤É Í∞ôÏïÑÏöî. Î¨¥Î¶¨ÌïòÏßÄ ÎßêÍ≥† Ï†ÅÎãπÌïú Ìú¥ÏãùÏùÑ Ï∑®Ìï¥Î≥¥ÏÑ∏Ïöî.",
                    low: "ÌîºÍ≥§Ìï®ÏùÑ ÎäêÎÅºÎäî ÏπúÍµ¨Îì§Ïù¥ ÏûàÎÑ§Ïöî. Î™∏Í≥º ÎßàÏùåÏùÑ Ïûò ÎèåÎ¥êÏ£ºÏÑ∏Ïöî."
                },
                'Ïä§Ìä∏Î†àÏä§': {
                    high: "Ïä§Ìä∏Î†àÏä§ Î∞õÎäî ÏùºÏù¥ ÏûàÏóàÎÇòÏöî? ÏπúÍµ¨Îì§Í≥º Ïù¥ÏïºÍ∏∞Î•º ÎÇòÎàÑÍ±∞ÎÇò ÏÑ†ÏÉùÎãòÍªò ÎèÑÏõÄÏùÑ ÏöîÏ≤≠Ìï¥Î≥¥ÏÑ∏Ïöî. ÌòºÏûê Ìï¥Í≤∞ÌïòÎ†§ ÌïòÏßÄ ÎßêÍ≥† Ìï®ÍªòÌï¥Ïöî!",
                    medium: "Ïä§Ìä∏Î†àÏä§Í∞Ä ÏûàÎäî ÌïòÎ£®Íµ∞Ïöî. ÍπäÍ≤å Ïà®ÏùÑ Ïâ¨Í≥† ÎßàÏùåÏùÑ ÏßÑÏ†ïÏãúÏºúÎ≥¥ÏÑ∏Ïöî.",
                    low: "ÏïΩÍ∞ÑÏùò Ïä§Ìä∏Î†àÏä§Í∞Ä ÏûàÎäî Í≤É Í∞ôÏïÑÏöî. Í∞ÄÎ≤ºÏö¥ Ïö¥ÎèôÏù¥ÎÇò Ï¢ãÏïÑÌïòÎäî ÌôúÎèôÏùÑ Ìï¥Î≥¥ÏÑ∏Ïöî."
                },
                'Ïä¨Ìîî': {
                    high: "ÎßàÏùåÏù¥ Î¨¥Í±∞Ïö¥ ÎÇ†Ïù¥Íµ∞Ïöî. Í¥úÏ∞ÆÏïÑÏöî, ÎàÑÍµ¨ÏóêÍ≤åÎÇò Í∑∏Îü∞ ÎÇ†Ïù¥ ÏûàÏñ¥Ïöî. Ïò§ÎäòÏùÄ ÏÑúÎ°úÎ•º Îçî Îî∞ÎúªÌïòÍ≤å Î∞∞Î†§Ìï¥Î≥¥ÏïÑÏöî.",
                    medium: "Ï°∞Í∏à Ïö∞Ïö∏Ìïú Í∏∞Î∂ÑÏù∏ Í≤É Í∞ôÏïÑÏöî. ÏπúÍµ¨Îì§Í≥º Ìï®Íªò ÏûàÏúºÎ©¥ Í∏∞Î∂ÑÏù¥ ÎÇòÏïÑÏßà Í±∞ÏòàÏöî.",
                    low: "ÎßàÏùåÏù¥ Ï°∞Í∏à Î¨¥Í±∞Ïö¥ ÏπúÍµ¨Îì§Ïù¥ ÏûàÎÑ§Ïöî. ÏÑúÎ°ú ÏúÑÎ°úÌï¥Ï£ºÎäî ÌïòÎ£®Í∞Ä ÎêòÍ∏∏ Î∞îÎùºÏöî."
                },
                'ÌôîÎÇ®': {
                    high: "ÌôîÍ∞Ä ÎÇòÎäî ÏùºÏù¥ ÏûàÏóàÎÇòÏöî? ÍπäÍ≤å Ïà®ÏùÑ Ïâ¨Í≥† ÎßàÏùåÏùÑ ÏßÑÏ†ïÏãúÏºúÎ≥¥ÏÑ∏Ïöî. Î¨∏Ï†úÍ∞Ä ÏûàÎã§Î©¥ Ï∞®Î∂ÑÌûà Ïù¥ÏïºÍ∏∞Î°ú Ìï¥Í≤∞Ìï¥Î≥¥ÏïÑÏöî.",
                    medium: "ÏßúÏ¶ùÎÇòÎäî ÏùºÏù¥ ÏûàÏóàÎÇò Î¥êÏöî. Ïû†Ïãú ÎßàÏùåÏùÑ Í∞ÄÎùºÏïâÌûàÍ≥† Í∏çÏ†ïÏ†ÅÏù∏ ÏÉùÍ∞ÅÏùÑ Ìï¥Î≥¥ÏÑ∏Ïöî.",
                    low: "ÌôîÍ∞Ä ÎÇòÎäî ÏπúÍµ¨Îì§Ïù¥ ÏûàÎÑ§Ïöî. ÎßàÏùåÏùÑ Ï∞®Î∂ÑÌûà Í∞ÄÏßÄÍ≥† ÏÑúÎ°ú Ïù¥Ìï¥Ìï¥Î≥¥ÏïÑÏöî."
                },
                'Î∂àÏïà': {
                    high: "Í±±Ï†ïÏù¥ÎÇò Î∂àÏïàÌïú ÎßàÏùåÏù¥ ÏûàÎäî Í≤É Í∞ôÏïÑÏöî. Ìï®Íªò Ïù¥ÏïºÍ∏∞ÌïòÎ©¥ Ìï¥Í≤∞Ï±ÖÏùÑ Ï∞æÏùÑ Ïàò ÏûàÏùÑ Í±∞ÏòàÏöî. ÌòºÏûê Í±±Ï†ïÌïòÏßÄ ÎßêÍ≥† ÎèÑÏõÄÏùÑ ÏöîÏ≤≠Ìï¥Î≥¥ÏÑ∏Ïöî.",
                    medium: "Î∂àÏïàÌïú ÎßàÏùåÏù¥ ÏûàÎÇò Î¥êÏöî. ÏπúÍµ¨Îì§Ïù¥ÎÇò ÏÑ†ÏÉùÎãòÍ≥º Ïù¥ÏïºÍ∏∞Ìï¥Î≥¥ÏÑ∏Ïöî.",
                    low: "ÏïΩÍ∞ÑÏùò Í±±Ï†ïÏù¥ ÏûàÎäî Í≤É Í∞ôÏïÑÏöî. Í∏çÏ†ïÏ†ÅÏúºÎ°ú ÏÉùÍ∞ÅÌïòÎ†§Í≥† ÎÖ∏Î†•Ìï¥Î≥¥ÏÑ∏Ïöî."
                },
                'ÏÑ§Î†ò': {
                    high: "ÏÑ§Î†àÎäî ÏùºÏù¥ ÏûàÎÇò Î¥êÏöî! Ï¢ãÏùÄ Í∏∞ÎåÄÍ∞êÏùÑ ÏπúÍµ¨Îì§Í≥º ÎÇòÎàÑÏñ¥Î≥¥ÏÑ∏Ïöî. Í∏çÏ†ïÏ†ÅÏù∏ ÏóêÎÑàÏßÄÍ∞Ä Îçî Ïª§Ïßà Í±∞ÏòàÏöî!",
                    medium: "Í∏∞ÎåÄÎêòÎäî ÏùºÏù¥ ÏûàÎÇò Î¥êÏöî! ÏÑ§Î†àÎäî ÎßàÏùåÏùÑ Í∞ÑÏßÅÌïòÏÑ∏Ïöî.",
                    low: "Ï¢ãÏùÄ ÏùºÏùÑ Í∏∞ÎåÄÌïòÎäî ÏπúÍµ¨Îì§Ïù¥ ÏûàÎÑ§Ïöî. Ìù¨ÎßùÏ∞¨ ÌïòÎ£®Í∞Ä ÎêòÍ∏∏ Î∞îÎùºÏöî."
                },
                'Î≥¥ÌÜµ': {
                    high: "ÌèâÏò®Ìïú ÌïòÎ£®ÎÑ§Ïöî. Ïù¥Îü∞ ÏïàÏ†ïÏ†ÅÏù∏ Î∂ÑÏúÑÍ∏∞ÎèÑ Ï¢ãÏïÑÏöî. Ïò§ÎäòÏùÄ ÏÉàÎ°úÏö¥ Í≤ÉÏóê ÎèÑÏ†ÑÌï¥Î≥¥Îäî Í±¥ Ïñ¥Îñ®ÍπåÏöî?",
                    medium: "Ï∞®Î∂ÑÌïòÍ≥† ÏïàÏ†ïÏ†ÅÏù∏ Î∂ÑÏúÑÍ∏∞ÏòàÏöî. Ïù¥Îü∞ ÌèâÏò®Ìï®ÎèÑ ÏÜåÏ§ëÌï¥Ïöî.",
                    low: "ÌèâÎ≤îÌïòÏßÄÎßå ÏïàÏ†ïÏ†ÅÏù∏ ÌïòÎ£®ÎÑ§Ïöî. ÏûëÏùÄ ÌñâÎ≥µÏùÑ Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî."
                }
            };
            
            const emotionMessages = messages[emotion];
            let message = "Ïò§ÎäòÎèÑ Ï¢ãÏùÄ ÌïòÎ£® Î≥¥ÎÇ¥ÏÑ∏Ïöî!";
            
            if (emotionMessages) {
                if (percentage >= 40) {
                    message = emotionMessages.high;
                } else if (percentage >= 25) {
                    message = emotionMessages.medium;
                } else {
                    message = emotionMessages.low;
                }
            }
            
            document.getElementById('advice-message').textContent = message;
        }

        // Ïò§Îäò Ï∞®Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
        function updateTodayChart(data, total) {
            const ctx = document.getElementById('todayChart').getContext('2d');
            
            if (todayChart) {
                todayChart.destroy();
            }
            
            const chartData = emotions.map(emotion => data[emotion] || 0);
            const labels = emotions.map(emotion => {
                const count = data[emotion] || 0;
                const percentage = total > 0 ? Math.round((count / total) * 100) : 0;
                return `${emotion} (${count}Î™Ö, ${percentage}%)`;
            });
            
            todayChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        data: chartData,
                        backgroundColor: emotions.map(emotion => emotionColors[emotion]),
                        borderWidth: 2,
                        borderColor: '#fff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                color: 'white',
                                font: {
                                    size: 12
                                },
                                filter: function(legendItem, chartData) {
                                    return chartData.datasets[0].data[legendItem.index] > 0;
                                }
                            }
                        }
                    }
                }
            });
        }

        // Ï£ºÍ∞Ñ ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
        function updateWeeklyStats() {
            const weeklyData = getWeeklyData();
            updateWeeklyChart(weeklyData);
            updateWeeklyInsight(weeklyData);
        }

        // Ï£ºÍ∞Ñ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        function getWeeklyData() {
            const today = new Date();
            const weekData = {};
            
            for (let i = 6; i >= 0; i--) {
                const date = new Date(today);
                date.setDate(date.getDate() - i);
                const dateString = date.getFullYear() + '-' + 
                                 String(date.getMonth() + 1).padStart(2, '0') + '-' + 
                                 String(date.getDate()).padStart(2, '0');
                
                const dayName = ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†'][date.getDay()];
                
                // Ïò§Îäò Îç∞Ïù¥ÌÑ∞ ÎòêÎäî ÌûàÏä§ÌÜ†Î¶¨ Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
                const dayData = todayData[dateString] || historyData[dateString] || {};
                
                weekData[dayName] = dayData;
            }
            
            return weekData;
        }

        // Ï£ºÍ∞Ñ Ï∞®Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
        function updateWeeklyChart(weeklyData) {
            const ctx = document.getElementById('weeklyChart').getContext('2d');
            
            if (weeklyChart) {
                weeklyChart.destroy();
            }
            
            const days = Object.keys(weeklyData);
            const datasets = emotions.map(emotion => ({
                label: emotion,
                data: days.map(day => weeklyData[day][emotion] || 0),
                backgroundColor: emotionColors[emotion],
                borderColor: emotionColors[emotion],
                borderWidth: 1
            }));
            
            weeklyChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: days,
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: {
                                color: 'white'
                            }
                        }
                    },
                    scales: {
                        x: {
                            ticks: {
                                color: 'white'
                            },
                            grid: {
                                color: 'rgba(255,255,255,0.1)'
                            }
                        },
                        y: {
                            ticks: {
                                color: 'white'
                            },
                            grid: {
                                color: 'rgba(255,255,255,0.1)'
                            }
                        }
                    }
                }
            });
        }

        // Ï£ºÍ∞Ñ Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
        function updateWeeklyInsight(weeklyData) {
            const days = Object.keys(weeklyData);
            const insights = [];
            
            // ÏöîÏùºÎ≥Ñ Ï£ºÏöî Í∞êÏ†ï Î∂ÑÏÑù
            days.forEach(day => {
                const dayData = weeklyData[day];
                const total = Object.values(dayData).reduce((sum, count) => sum + count, 0);
                
                if (total > 0) {
                    let topEmotion = '';
                    let maxCount = 0;
                    
                    emotions.forEach(emotion => {
                        const count = dayData[emotion] || 0;
                        if (count > maxCount) {
                            maxCount = count;
                            topEmotion = emotion;
                        }
                    });
                    
                    const percentage = Math.round((maxCount / total) * 100);
                    if (percentage >= 30) {
                        insights.push(`${day}ÏöîÏùºÏóêÎäî '${topEmotion}'Ïù¥ ${percentage}%Î°ú ÎßéÏïòÏñ¥Ïöî.`);
                    }
                }
            });
            
            const insightText = insights.length > 0 ? 
                insights.join(' ') : 
                'ÏïÑÏßÅ Ï∂©Î∂ÑÌïú Ï£ºÍ∞Ñ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§. Îçî ÎßéÏùÄ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏåìÏù¥Î©¥ Ìå®ÌÑ¥ÏùÑ Î∂ÑÏÑùÌï¥ÎìúÎ¶¥Í≤åÏöî!';
                
            document.getElementById('weekly-insight').textContent = insightText;
        }

        // ÌÉ≠ Ï†ÑÌôò
        function showTab(tabName) {
            // Î™®Îì† ÌÉ≠ Ïà®Í∏∞Í∏∞
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.add('hidden');
            });
            
            // Î™®Îì† ÌÉ≠ Î≤ÑÌäº ÎπÑÌôúÏÑ±Ìôî
            document.querySelectorAll('[id^="tab-"]').forEach(btn => {
                btn.classList.remove('tab-active');
            });
            
            // ÏÑ†ÌÉùÎêú ÌÉ≠ Î≥¥Ïù¥Í∏∞
            document.getElementById(tabName + '-page').classList.remove('hidden');
            document.getElementById('tab-' + tabName).classList.add('tab-active');
            
            // Ï∞®Ìä∏Í∞Ä ÏûàÎäî ÌÉ≠Ïùò Í≤ΩÏö∞ Ï∞®Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
            if (tabName === 'today-stats') {
                setTimeout(updateTodayStats, 100);
            } else if (tabName === 'weekly-stats') {
                setTimeout(updateWeeklyStats, 100);
            } else if (tabName === 'admin') {
                updateDebugInfo();
            }
        }

        // Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞
        function exportData() {
            const allData = { ...historyData, ...todayData };
            let csvContent = "ÎÇ†Ïßú,Í∞êÏ†ï,ÌöüÏàò,ÎπÑÏú®\n";
            
            Object.keys(allData).forEach(date => {
                const dayData = allData[date];
                const total = Object.values(dayData).reduce((sum, count) => sum + count, 0);
                
                emotions.forEach(emotion => {
                    const count = dayData[emotion] || 0;
                    const percentage = total > 0 ? Math.round((count / total) * 100) : 0;
                    csvContent += `${date},${emotion},${count},${percentage}%\n`;
                });
            });
            
            const blob = new Blob(['\ufeff' + csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `Í∞êÏ†ïÏ≤¥ÌÅ¨Ïù∏_${getTodayString()}.csv`;
            link.click();
        }

        // Ïò§Îäò Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
        function clearTodayData() {
            if (confirm('Ïò§Îäò Îç∞Ïù¥ÌÑ∞Î•º Ï†ïÎßê Ï¥àÍ∏∞ÌôîÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
                const todayString = getTodayString();
                todayData[todayString] = {};
                emotions.forEach(emotion => {
                    todayData[todayString][emotion] = 0;
                });
                updateDisplay();
                saveData();
                alert('Ïò§Îäò Îç∞Ïù¥ÌÑ∞Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.');
            }
        }

        // Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Î≥¥Í∏∞
        function showAllData() {
            const section = document.getElementById('all-data-section');
            const content = document.getElementById('all-data-content');
            
            let htmlContent = '<h4 class="font-bold mb-2">üìÖ Ïò§Îäò Îç∞Ïù¥ÌÑ∞</h4>';
            Object.keys(todayData).forEach(date => {
                const dayData = todayData[date];
                const total = Object.values(dayData).reduce((sum, count) => sum + count, 0);
                htmlContent += `<div class="mb-2"><strong>${formatDate(date)}</strong> (Ï¥ù ${total}Î™Ö)<br>`;
                emotions.forEach(emotion => {
                    const count = dayData[emotion] || 0;
                    if (count > 0) {
                        htmlContent += `${emotion}: ${count}Î™Ö `;
                    }
                });
                htmlContent += '</div>';
            });
            
            htmlContent += '<h4 class="font-bold mb-2 mt-4">üìö ÌûàÏä§ÌÜ†Î¶¨ Îç∞Ïù¥ÌÑ∞</h4>';
            Object.keys(historyData).forEach(date => {
                const dayData = historyData[date];
                const total = Object.values(dayData).reduce((sum, count) => sum + count, 0);
                htmlContent += `<div class="mb-2"><strong>${formatDate(date)}</strong> (Ï¥ù ${total}Î™Ö)<br>`;
                emotions.forEach(emotion => {
                    const count = dayData[emotion] || 0;
                    if (count > 0) {
                        htmlContent += `${emotion}: ${count}Î™Ö `;
                    }
                });
                htmlContent += '</div>';
            });
            
            content.innerHTML = htmlContent;
            section.classList.toggle('hidden');
        }

        // Îç∞Ïù¥ÌÑ∞ Î≥µÏõê (CSV ÏßÄÏõê Ï∂îÍ∞Ä)
        function restoreData() {
            const fileInput = document.getElementById('restore-file');
            const file = fileInput.files[0];
            const logDiv = document.getElementById('restore-log');
            
            if (!file) {
                alert('ÌååÏùºÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
                return;
            }
            
            logDiv.innerHTML = 'üìÅ ÌååÏùº ÏùΩÍ∏∞ Ï§ë...<br>';
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const content = e.target.result;
                    let data = {};
                    
                    logDiv.innerHTML += '‚úÖ ÌååÏùº ÏùΩÍ∏∞ ÏÑ±Í≥µ<br>';
                    
                    // JSON ÎòêÎäî CSV ÌååÏã±
                    if (file.name.endsWith('.json') || content.trim().startsWith('{')) {
                        // JSON ÌååÏùº Ï≤òÎ¶¨
                        const jsonData = JSON.parse(content);
                        logDiv.innerHTML += '‚úÖ JSON ÌååÏã± ÏÑ±Í≥µ<br>';
                        
                        // Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ ÌôïÏù∏ Î∞è Î≥ÄÌôò
                        if (jsonData.todayData || jsonData.historyData) {
                            data = { ...jsonData.todayData, ...jsonData.historyData };
                        } else {
                            data = jsonData;
                        }
                    } else {
                        // CSV ÌååÏùº Ï≤òÎ¶¨
                        logDiv.innerHTML += 'üìä CSV ÌååÏã± ÏãúÏûë<br>';
                        const lines = content.split('\n');
                        
                        if (lines.length < 2) {
                            throw new Error('CSV ÌååÏùºÏù¥ ÎπÑÏñ¥ÏûàÍ±∞ÎÇò ÌòïÏãùÏù¥ ÏûòÎ™ªÎêòÏóàÏäµÎãàÎã§.');
                        }
                        
                        // Ìó§Îçî ÌôïÏù∏
                        const header = lines[0].trim();
                        if (!header.includes('ÎÇ†Ïßú') || !header.includes('Í∞êÏ†ï') || !header.includes('ÌöüÏàò')) {
                            throw new Error('CSV ÌååÏùº ÌòïÏãùÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§. "ÎÇ†Ïßú,Í∞êÏ†ï,ÌöüÏàò,ÎπÑÏú®" ÌòïÏãùÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.');
                        }
                        
                        // Îç∞Ïù¥ÌÑ∞ ÌååÏã±
                        for (let i = 1; i < lines.length; i++) {
                            const line = lines[i].trim();
                            if (!line) continue;
                            
                            const parts = line.split(',');
                            if (parts.length < 3) continue;
                            
                            const date = parts[0].trim();
                            const emotion = parts[1].trim();
                            const count = parseInt(parts[2].trim()) || 0;
                            
                            // ÎÇ†Ïßú ÌòïÏãù Í≤ÄÏ¶ù
                            if (!/^\d{4}-\d{2}-\d{2}$/.test(date)) continue;
                            
                            // Í∞êÏ†ï Í≤ÄÏ¶ù
                            if (!emotions.includes(emotion)) continue;
                            
                            // Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
                            if (!data[date]) {
                                data[date] = {};
                                emotions.forEach(e => {
                                    data[date][e] = 0;
                                });
                            }
                            
                            data[date][emotion] = count;
                        }
                        
                        logDiv.innerHTML += '‚úÖ CSV ÌååÏã± ÏôÑÎ£å<br>';
                    }
                    
                    // Îç∞Ïù¥ÌÑ∞ Î≥µÏõê
                    let restoredCount = 0;
                    const todayString = getTodayString();
                    
                    Object.keys(data).forEach(date => {
                        if (date === 'meta' || date === 'exportDate' || date === 'version') return;
                        
                        const dayData = data[date];
                        
                        // ÎÇ†Ïßú Í≤ÄÏ¶ù
                        if (!/^\d{4}-\d{2}-\d{2}$/.test(date)) return;
                        
                        if (date === todayString) {
                            // Ïò§Îäò Îç∞Ïù¥ÌÑ∞Îäî todayDataÏóê Ï†ÄÏû•
                            logDiv.innerHTML += `üìÖ Ïò§Îäò Îç∞Ïù¥ÌÑ∞ (${date}) Î≥µÏõê Ï§ë...<br>`;
                            todayData[date] = {};
                            emotions.forEach(emotion => {
                                todayData[date][emotion] = dayData[emotion] || 0;
                            });
                        } else {
                            // Í≥ºÍ±∞ Îç∞Ïù¥ÌÑ∞Îäî historyDataÏóê Ï†ÄÏû•
                            logDiv.innerHTML += `üìö Í≥ºÍ±∞ Îç∞Ïù¥ÌÑ∞ (${date}) Î≥µÏõê Ï§ë...<br>`;
                            historyData[date] = {};
                            emotions.forEach(emotion => {
                                historyData[date][emotion] = dayData[emotion] || 0;
                            });
                        }
                        restoredCount++;
                    });
                    
                    logDiv.innerHTML += `‚úÖ ${restoredCount}Í∞ú ÎÇ†Ïßú Îç∞Ïù¥ÌÑ∞ Î≥µÏõê ÏôÑÎ£å<br>`;
                    logDiv.innerHTML += 'üíæ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Ï§ë...<br>';
                    
                    saveData();
                    updateDisplay();
                    
                    logDiv.innerHTML += '‚úÖ Î≥µÏõê ÏôÑÎ£å!<br>';
                    logDiv.innerHTML += `üìä ÌòÑÏû¨ Ïò§Îäò: ${todayString}<br>`;
                    
                    alert(`Îç∞Ïù¥ÌÑ∞ Î≥µÏõêÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!\nÎ≥µÏõêÎêú ÎÇ†Ïßú: ${restoredCount}Í∞ú`);
                    
                } catch (error) {
                    console.error('Î≥µÏõê Ïò§Î•ò:', error);
                    logDiv.innerHTML += `‚ùå Ïò§Î•ò Î∞úÏÉù: ${error.message}<br>`;
                    alert('Îç∞Ïù¥ÌÑ∞ Î≥µÏõê Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ' + error.message);
                }
            };
            
            reader.readAsText(file, 'UTF-8');
        }

        // ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
        function updateDebugInfo() {
            const debugDiv = document.getElementById('debug-info');
            const todayString = getTodayString();
            
            const info = [
                `ÌòÑÏû¨ ÎÇ†Ïßú: ${todayString}`,
                `Ï†ÄÏû•Îêú Ïò§Îäò Îç∞Ïù¥ÌÑ∞ ÌÇ§: ${Object.keys(todayData).join(', ') || 'ÏóÜÏùå'}`,
                `Ï†ÄÏû•Îêú ÌûàÏä§ÌÜ†Î¶¨ ÌÇ§: ${Object.keys(historyData).join(', ') || 'ÏóÜÏùå'}`,
                `Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄ ÌÅ¨Í∏∞: ${JSON.stringify(todayData).length + JSON.stringify(historyData).length} bytes`,
                `ÎßàÏßÄÎßâ Ï†ÄÏû•: ${localStorage.getItem('lastSavedDate') || 'ÏóÜÏùå'}`,
                `ÏãúÏä§ÌÖú Î≤ÑÏ†Ñ: 3.5`
            ];
            
            debugDiv.innerHTML = info.join('<br>');
        }

        // ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ï¥àÍ∏∞Ìôî
        window.onload = function() {
            init();
        };
    </script>
</body>
</html>
    <script id="html_badge_script1">
        window.__genspark_remove_badge_link = "https://www.genspark.ai/api/html_badge/" +
            "remove_badge?token=To%2FBnjzloZ3UfQdcSaYfDsXB6d2qb3W2pjSvxPEw7ahopuSLHwBd9dCl0AzkPd9buFC7J4gZDPJ%2F1eK6af1tMCgjLLOn7zkp1sEq2QvdbJOT%2B4gZSOXAJVicQFhUxwGZ%2Fip8o%2FBNjIHpoPrErzwc8OKyMp850bcXNyzwWmg6nfbMwCub2%2BiIpod8vaTY2x9JoxpNH2JXD%2B8L%2FMmlJQNB5blDNz%2F0xKTdTbfrxROzwoRYlqGoP3r4iA%2BBRLklujSFhsIC6Aduiu7MeZSctaPNsg%2Fn0yrchzWWS9i%2BGErGsZUzGMC7RxfbwjQQpAMfnywac0ISsYKJAxYAhlOFIJIA%2B9HMz3pvmrdaXP6Lfwi%2F3tGR7QunrsDwQslCqepzFwT07W8geYQh8mpOYncVJTDAfZss1SYDB5qGWPgnxUdo0DqtPI%2BVRjaJSMI2ELxTL26I9IqHfRz8QCyZvRs8wA%2F7DzZSaOYC3GHuOFp%2FICtOWJ9hSHj9gqxasGASTmVpUZ9yzxHwLif0X7heaIDU5wMTFAa%2Fv7U2lwWd3TDD43Wd5rc%3D";
        window.__genspark_locale = "ko-KR";
        window.__genspark_token = "To/BnjzloZ3UfQdcSaYfDsXB6d2qb3W2pjSvxPEw7ahopuSLHwBd9dCl0AzkPd9buFC7J4gZDPJ/1eK6af1tMCgjLLOn7zkp1sEq2QvdbJOT+4gZSOXAJVicQFhUxwGZ/ip8o/BNjIHpoPrErzwc8OKyMp850bcXNyzwWmg6nfbMwCub2+iIpod8vaTY2x9JoxpNH2JXD+8L/MmlJQNB5blDNz/0xKTdTbfrxROzwoRYlqGoP3r4iA+BRLklujSFhsIC6Aduiu7MeZSctaPNsg/n0yrchzWWS9i+GErGsZUzGMC7RxfbwjQQpAMfnywac0ISsYKJAxYAhlOFIJIA+9HMz3pvmrdaXP6Lfwi/3tGR7QunrsDwQslCqepzFwT07W8geYQh8mpOYncVJTDAfZss1SYDB5qGWPgnxUdo0DqtPI+VRjaJSMI2ELxTL26I9IqHfRz8QCyZvRs8wA/7DzZSaOYC3GHuOFp/ICtOWJ9hSHj9gqxasGASTmVpUZ9yzxHwLif0X7heaIDU5wMTFAa/v7U2lwWd3TDD43Wd5rc=";
    </script>
    
    <script id="html_notice_dialog_script" src="https://www.genspark.ai/notice_dialog.js"></script>
    
